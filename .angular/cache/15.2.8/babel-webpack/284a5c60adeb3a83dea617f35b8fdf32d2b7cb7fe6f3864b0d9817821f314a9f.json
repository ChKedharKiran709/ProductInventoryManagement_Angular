{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000';\n  }\n  login(email, password) {\n    return this.http.get(`${this.apiUrl}/users`).pipe(map(users => {\n      const user = users.find(u => u.email === email && u.password === password);\n      if (user) {\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        return true;\n      }\n      return false;\n    }));\n  }\n  logout() {\n    localStorage.removeItem('currentUser');\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('currentUser');\n  }\n  // Check if the user already exists\n  checkUserExists(email) {\n    return this.http.get(`${this.apiUrl}/users`).pipe(map(users => users.some(user => user.email === email)));\n  }\n  // Register a new user (only if email doesn't exist)\n  register(user) {\n    return this.checkUserExists(user.email).pipe(switchMap(exists => {\n      if (exists) {\n        return throwError(() => new Error('Email already exists'));\n      }\n      return this.http.post(`${this.apiUrl}/users`, user);\n    }));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AA4CA,SAAyBA,UAAU,QAAQ,MAAM;AACjD,SAASC,GAAG,EAAEC,SAAS,QAAQ,gBAAgB;;;AAK/C,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,uBAAuB;EAEA;EAExCC,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAQ,GAAG,IAAI,CAACC,MAAM,QAAQ,CAAC,CAACC,IAAI,CACtDV,GAAG,CAAEW,KAAK,IAAI;MACZ,MAAMC,IAAI,GAAGD,KAAK,CAACE,IAAI,CACpBC,CAAM,IAAKA,CAAC,CAACR,KAAK,KAAKA,KAAK,IAAIQ,CAAC,CAACP,QAAQ,KAAKA,QAAQ,CACzD;MACD,IAAIK,IAAI,EAAE;QACRG,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,CAAC;QACzD,OAAO,IAAI;;MAEb,OAAO,KAAK;IACd,CAAC,CAAC,CACH;EACH;EAEAO,MAAM;IACJJ,YAAY,CAACK,UAAU,CAAC,aAAa,CAAC;EACxC;EAEAC,UAAU;IACR,OAAO,CAAC,CAACN,YAAY,CAACO,OAAO,CAAC,aAAa,CAAC;EAC9C;EAEA;EACAC,eAAe,CAACjB,KAAa;IAC3B,OAAO,IAAI,CAACF,IAAI,CAACI,GAAG,CAAQ,GAAG,IAAI,CAACC,MAAM,QAAQ,CAAC,CAACC,IAAI,CACtDV,GAAG,CAACW,KAAK,IAAIA,KAAK,CAACa,IAAI,CAACZ,IAAI,IAAIA,IAAI,CAACN,KAAK,KAAKA,KAAK,CAAC,CAAC,CACvD;EACH;EAEA;EACAmB,QAAQ,CAACb,IAAS;IAChB,OAAO,IAAI,CAACW,eAAe,CAACX,IAAI,CAACN,KAAK,CAAC,CAACI,IAAI,CAC1CT,SAAS,CAACyB,MAAM,IAAG;MACjB,IAAIA,MAAM,EAAE;QACV,OAAO3B,UAAU,CAAC,MAAM,IAAI4B,KAAK,CAAC,sBAAsB,CAAC,CAAC;;MAE5D,OAAO,IAAI,CAACvB,IAAI,CAACwB,IAAI,CAAC,GAAG,IAAI,CAACnB,MAAM,QAAQ,EAAEG,IAAI,CAAC;IACrD,CAAC,CAAC,CACH;EACH;;AA7CWV,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA2B,SAAX3B,WAAW;EAAA4B,YAFV;AAAM","names":["throwError","map","switchMap","AuthService","constructor","http","login","email","password","get","apiUrl","pipe","users","user","find","u","localStorage","setItem","JSON","stringify","logout","removeItem","isLoggedIn","getItem","checkUserExists","some","register","exists","Error","post","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\kedhar\\OneDrive\\Desktop\\wipro learning materials\\Phase-2 material\\Angular-Product-Inventory-Management-Solution-main\\src\\app\\core\\auth.service.ts"],"sourcesContent":["// import { HttpClient } from '@angular/common/http';\n// import { Injectable } from '@angular/core';\n// import { Observable } from 'rxjs';\n// import { map } from 'rxjs/operators';\n\n// @Injectable({\n//   providedIn: 'root',\n// })\n// export class AuthService {\n//   private apiUrl = 'http://localhost:3000';\n\n//   constructor(private http: HttpClient) { }\n\n//   login(email: string, password: string): Observable<boolean> {\n//     return this.http.get<any[]>(`${this.apiUrl}/users`).pipe(\n//       map((users) => {\n//         const user = users.find(\n//           (u: any) => u.email === email && u.password === password\n//         );\n//         if (user) {\n//           localStorage.setItem('currentUser', JSON.stringify(user));\n//           return true;\n//         }\n//         return false;\n//       })\n//     );\n//   }\n\n//   logout(): void {\n//     localStorage.removeItem('currentUser');\n//   }\n\n//   isLoggedIn(): boolean {\n//     return !!localStorage.getItem('currentUser');\n//   }\n\n//   register(user: any): Observable<any> {\n//     return this.http.post(`${this.apiUrl}/users`, user);\n//   }\n// }\n\n\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of, throwError } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:3000';\n\n  constructor(private http: HttpClient) { }\n\n  login(email: string, password: string): Observable<boolean> {\n    return this.http.get<any[]>(`${this.apiUrl}/users`).pipe(\n      map((users) => {\n        const user = users.find(\n          (u: any) => u.email === email && u.password === password\n        );\n        if (user) {\n          localStorage.setItem('currentUser', JSON.stringify(user));\n          return true;\n        }\n        return false;\n      })\n    );\n  }\n\n  logout(): void {\n    localStorage.removeItem('currentUser');\n  }\n\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem('currentUser');\n  }\n\n  // Check if the user already exists\n  checkUserExists(email: string): Observable<boolean> {\n    return this.http.get<any[]>(`${this.apiUrl}/users`).pipe(\n      map(users => users.some(user => user.email === email))\n    );\n  }\n\n  // Register a new user (only if email doesn't exist)\n  register(user: any): Observable<any> {\n    return this.checkUserExists(user.email).pipe(\n      switchMap(exists => {\n        if (exists) {\n          return throwError(() => new Error('Email already exists'));\n        }\n        return this.http.post(`${this.apiUrl}/users`, user);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}